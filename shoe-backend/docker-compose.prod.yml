version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: shoe-backend-prod
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongo:27017/shoe-store
      - JWT_SECRET=${JWT_SECRET}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mongo
      - redis
    networks:
      - shoe-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database
  mongo:
    image: mongo:6.0
    container_name: shoe-mongo-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=shoe-store
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - shoe-network
    command: mongod --auth

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: shoe-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shoe-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: shoe-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - shoe-network

  # MongoDB backup service
  mongo-backup:
    image: mongo:6.0
    container_name: shoe-backup-prod
    restart: unless-stopped
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB=shoe-store
      - MONGO_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_PASSWORD=${MONGO_ROOT_PASSWORD}
      - BACKUP_SCHEDULE=0 2 * * *
    volumes:
      - ./backups:/backups
      - ./backup-script.sh:/backup-script.sh:ro
    networks:
      - shoe-network
    entrypoint: ["/bin/bash", "/backup-script.sh"]

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: shoe-logs-prod
    restart: unless-stopped
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/app:ro
    ports:
      - "24224:24224"
    networks:
      - shoe-network

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local

networks:
  shoe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16